Check50
Printf
Debug50
Help50- you don’t understand an error message
Style50
Debug 50 and breakpoints
Memory
Malloc
Valgrind
Valgrind will help find memory leaks
Malloc allocates but if you don’t free it, you keep asking and then eventually it crashes

Accidently touch memory that you shouldn’t
Malloc assigns the address of a pointer, need to store that in a variable
Malloc you need stdlib.h library
C doesn’t scream when you go too far.
Technically wrong.
When you request memory, they give more memory you can technically reach it…it will work on your
You type valgrind ./filename it is a bunch of nonsense
You have to type help50 valgrind ./memory
Still the same amount of black and white input nonsense but at the end of it, you have a summary that addresses the issues
When you add malloc you have to free the memory after the issues
You have to free it after the issues
Have plenty of tools that you can use to modify your code
Command line arguments with valgrind
Rubber ducking 50, talk to the duck walking through your code and ‘
Testing through your code step to step and talk to them

Text is the top of the program, it is running the program
It is when the 0s and 1s are loaded into RAM,
Moves quicker
when x and y were swapped they were stored in a temporary space and the space was then swapped but they only swapped the temporary values
when you stored them with pointers, it allowed them to swap with code
struct- design own data structures
we can implement our own features
struct.h
header files have code you want to share
{
char *name;
char *dorm;
}
Call structs with a .notation

Using arrays, downside of array, you cannot mix data types

Size cannot change
Int x[2]
You cannot fit a third object in it
You have to create a new array
So if you had 42, 13 you would need to make an array to add 50
You would take the same memory locations of 42 and 13 but also have to add 50

Effency of resizing an array, N represents n +1 to create a new array
If there is more needed
There is a function in c called realloc which allocates additional ram to the program
Realloc will, create a new array…however this is all linear
This all happens on the heap
Link list, elements point to other elements

Commit to a data structure and stick to it
Create another element, then another and another
When you use malloc 3 separate times, they are not being stored next to them…they might not even be proximate to each other
Create a link , pointer that is just an address
Now we have to store the memory of an item but also request slightly more memory to store the address of the next item

So each box now has an item and next memory location.  Last item will have a null value underneath them
Create a link list
Typedef struct node
{
	Int n;
	Struct node * next;
}
Node;

They are the addresses of an int. the item is pointing to the entire node
Store a pointer to a node
Pointer to a node with
First part is called n and the second part there is a pointer called next
Have to declare a struct node first and a pointer to the very first thing we are defining
There are garbage values, and there has to point selectively
Computers and code do not run like humans
Cannot go backwords, so have to peek ahead to see what is there.

If you want everything sorted it takes a while to run
If its an unsorted list all you do is have new element point to the first real element
and have the first element point to the newest element.

It is only 2 steps
Much much quicker
If that is the same amount of steps that is constant time
If you want really fast insertions just add them at the beginning
If you over allocate space you are wasting space.
If you want to add everything last you would need a second pointer that always points to the last element in the array.

Can have them store 2 ints so each points in two directions
Array is essentially just a chunk of memory
Or more specifically the address of a chunk of memory
You can set it equal to:
 int *numbers= NULL;
initially it is set to null
size == capacity
when both are 0 it is the same
realloc will find a space that is the size for the array. This is if the memory is not
available next to the old is not available

numbers  = realloc(numbers, sizeof(int) * (size + 1));
size +1 is
if realloc fails to generate variable it will fail

     if (!n)
     {
         return 1;
     }
If there is no more memory it should fail
If n is not a valid pointer return 1
	Has give you
	 a new node.  And in it is number on top and next on the bottom
	So the pointer -> then draws in the number like
	n->number = number;

node *n = malloc(sizeof(node));
the space is created
n->number = number;
the number is created
n is a pointer to a node,
how do you go to an address
so basically saying if numbers is not null
if (numbers)
     {
A pointer is an address

if (numbers)
     {
         for (node *ptr = numbers; ptr != NULL; ptr = ptr->next)
         {
             if (!ptr->next)
             {
                 ptr->next = n;
                 break;
             }
         }
     }
for (node *ptr = numbers; ptr != NULL; ptr = ptr->next)

you have n->number = number;
a new number is created in that space,
then also in that space you have
n->next = NULL;
this creates a next element in that node and makes it NULL

address is a place in memory


if (numbers)
     {
         for (node *ptr = numbers; ptr != NULL; ptr = ptr->next)
         {
             if (!ptr->next)
             {
                 ptr->next = n;
                 break;
             }
         }
     }
for (node *ptr = numbers; ptr != NULL; ptr = ptr->next)

