Lecture 3
Computer Science
Have to preprocess computer
Have to actually compile
 Take source code and make assembly code
Take cs50.h and stdio.h
Printf.c
Where the code actually is and merge the 0s and 1s that make the process possible
More help then help50, printf, and style50
Help50 will help you understand what the code is that is being processed
Cs50ide is a more powerful too of what we will be using
More features that help you solve problems with your code
Umbuto linux.  IDE saves everything

. is current file
Files with an asterisk means its executable
Rmdir is remove directory
Can use check50, checks correctness of file
Check50 expects cs50/2019/fall/hello
Debugger, helps remove bugs
Using debugger, compile, then debug50 <name of file>
Debut 50  ./hello

Set break points for code
Hit the arrow in the line number, it will break or pause on this line
There is a mention of a variable.
When highlighted, stops at the stop point
Play button will run it
Step over will run it just once…step in, can step into a function
Most common type is step over, goes through the values
Walk through code one line at a time
Debugger just shows you values along the way
Debugger will save you a ton of time.
Can have a watch value, or lines of code
Have been using functions from cs50 libraries.
Its hard to get info from the users reliable
String, is an array of characters.
String not quite like any other character types.

Now should open ide
Comparing
Characters
 There is a string of arrays with Brian \0
\0 is null
When you type in a string, its typing its location not actually the character. “aka memory location”

Memory, floats interger
Isolate characters then use a for loop
Inso far as strings are identified by the ending characters, that is actually /0
Brian
Compare_strings (s, T)
Bool returns true or false
Comparing strings, first thing would be compare stringlengths
If the stringlengths of I does not equal string length of b , return false… then return true
If you compare uppercase and lowercase, they would be different.

There is no such thing as a string, it is the same thing about char *
•	After a data point is the address of the char
100 or 900

Now you can put it as char *a
It goes as * next to variable name
You can use strcmp, if return value == 0, returns same…otherwise return different
It returns a positive number if s comes before t alphabetically
It returns a negative number if s comes after t alphabetically

Main itself can return values.  Returns a positive number it fails.  Returns a 0 number it means it works
Avoid a segmentation fault means you touched memory that you shouldn’t have
Return helps avoid these problems
NULL is technically the 0 address
So if (!t)
Getting string from user.  It is array underneath the hood
S is a pointer to one set of numbers
If i=

There is no such thing as a string
Its an array of
Pointer stores a
*Is address of
Pointer is an address
Char * stores the address of a char
Address is a pointer
Pointer can store other data points as well
Get string it actually returns char *
Compare for
Strcmp is called in string.h
If (strcmp(s, t) ==0
Strcmp returns 0 if the strings are the same
Returns 1 if s is suppose to come before t
Returns -# if s is suppose to come after t, alphabetically
Can also compare ascii if <, >, can compare contacts or dictionary
Returns byte of the first byte of the code
or 0, you can detect something is incorrect

If (s ==If null, NULL)
{
Segmentation fault- you touched memory that you should not touch.
Always want to think about if it doesn’t have segmentation fault
If(!s)
{
Return 1;
}
So the upper line of code s is pointing to the first letter, it is taking that memory… but we are also saying that t is stored in the same place so that is uppercased as well
Malloc stands for memory allocates
Asks one question, how many memory do you need
Sizeof tells you how many memory you need for a char
When in doubt check out cs50 reference page

Strcpy(t, s) destination is the first call, origin is the second
Copies from one into the other
Malloc has an opposite
After staying on the computer, that keeps allocating memory and never calls the opposite back it never gives the memory back to the user
Should use free() as long as you give back the variable back
Get_int gets an int from the user
In get int &x gets the address of the variable
Don’t need the address again
Pointer is 64 bits
All we allocate space for is the entry
Declare char s[6];
Declared enough space for /n
When you add really long name but only called 6 characters
Computer gives you special bytes past the origin bytes
Char *s = get_string(“s: “);
Char *t = get_string(“t: “);

Printf(“s: %p\n”, s);
Printf(“t: %p\n”, t);
Prints out the memory
0x symbolizes hexadecimal.

Void swap(int a, int b)
{
	Int tmp = a;
	A= b;
	B =tmp;
}
